generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid()) @map("user_id") @db.Char(36)
  email         String         @unique
  photo_profile String?
  cover         String?
  name          String
  role          Role           @default(GUEST)
  religion      Religion?      @default(Islam)
  gender        Gender?        @default(Male)
  linkedin      String?
  github        String?
  instagram     String?
  website       String?
  whatsapp      String?
  userAuth      UserAuth?
  teacherId     String?
  studentId     String?
  Student       Student?
  Teacher       Teacher?
  notification  Notification[]
  Team          TeamMember[]
  invitation    TeamRequest[]  @relation("RequestReceiver")
  teamRequest   TeamRequest[]  @relation("RequestSender")
}

model Student {
  id              String         @id @default(uuid())
  username        String?
  absent          String?
  NIS             String?
  NISN            String?
  schoolOrigin    String?
  generation      String?
  biography       String?        @db.LongText()
  status          Status         @default(Dont_Have_Team)
  BirthDate       String?
  jobId           String?
  classOfTalentId String?
  UserJob         UserJob?       @relation(fields: [jobId], references: [id])
  ClassOfTalent   ClassOfTalent? @relation(fields: [classOfTalentId], references: [id])
  certificates    certificate[]  @relation("CertificateToUser")
  projects        Project[]      @relation("ProjectToUser")
  Skills          Skill[]        @relation("SkillToUser")
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String         @unique
}

model Teacher {
  id      String  @id @default(uuid())
  phone   String?
  desc    String? @db.LongText()
  school  String
  subject String
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String  @unique
  Team    Team[]  @relation("teacherToTeam")
}

model UserAuth {
  id         String    @id @default(uuid()) @map("userauth_id") @db.Char(36)
  password   String?
  last_login DateTime?
  userEmail  String    @unique
  user       User      @relation(fields: [userEmail], references: [email], onDelete: Cascade)
}

model Team {
  id          String        @id @default(uuid())
  name        String
  description String        @db.LongText()
  logo        String?
  instagram   String?
  linkedin    String?
  ownerId     String
  teamStatus  TeamStatus    @default(ACTIVE)
  createAt    DateTime      @default(now())
  mentorId    String?
  mentor      Teacher?      @relation("teacherToTeam", fields: [mentorId], references: [id], onDelete: Cascade)
  project     Project[]
  member      TeamMember[]
  requests    TeamRequest[]
}

model TeamMember {
  id       String   @id @default(uuid())
  teamId   String
  memberId String
  role     TeamRole
  joinedAt DateTime @default(now())
  team     Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

model TeamRequest {
  id             String         @id @default(uuid())
  teamId         String
  senderId       String
  receiverId     String
  type           InvitationType
  status         RequestStatus  @default(PENDING)
  createAt       DateTime       @default(now())
  receiver       User           @relation("RequestReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  sender         User           @relation("RequestSender", fields: [senderId], references: [id], onDelete: Cascade)
  team           Team           @relation(fields: [teamId], references: [id], onDelete: Cascade)
  Notification   Notification?  @relation(fields: [notificationId], references: [id])
  notificationId String?
}

model Notification {
  id          String        @id @default(uuid())
  title       String
  message     String
  receiverId  String
  createAt    DateTime      @default(now())
  receiver    User          @relation(fields: [receiverId], references: [id], onDelete: Cascade)
  teamRequest TeamRequest[]
}

model Skill {
  SkillName String    @id @unique
  users     Student[] @relation("SkillToUser")
}

model Project {
  ProjeectName String    @id @unique
  link         String?
  users        Student[] @relation("ProjectToUser")
  Team         Team?     @relation(fields: [teamId], references: [id])
  teamId       String?
}

model certificate {
  CertificateName String    @id @unique
  img             String
  link            String?
  users           Student[] @relation("CertificateToUser")
}

model UserJob {
  id       String    @id @default(uuid())
  jobName  String    @default("")
  jobDesc  String    @default("")
  createAt DateTime  @default(now())
  user     Student[]
}

model ClassOfTalent {
  id           String    @id @default(uuid())
  Studentclass String
  user         Student[]
}

enum Role {
  GUEST
  SISWA
  GURU
  ADMIN
}

enum Status {
  Have_Team
  Dont_Have_Team
}

enum Gender {
  Male
  Female
}

enum Religion {
  Islam
  Kristen_Protestan
  Kristen_Katolik
  Budha
  Hindu
  Konghucu
}

enum RequestStatus {
  PENDING
  VERIFIED
  DENIED
}

enum InvitationType {
  INVITE
  REQUEST
}

enum TeamRole {
  OWNER
  MEMBER
}

enum TeamStatus {
  ACTIVE
  INACTIVE
  DELETED
}
